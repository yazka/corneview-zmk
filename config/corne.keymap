/*                                      42 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
              ╰────────────┴────────────╯                         ╰─────────────┴─────────────╯             */


/* 
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
/*
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
*/

#define HOST_OS 1 // 0 for win, 1 for linux, 2 for mac
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define KEYS_T 36 37 38 39 40 41

#define XXX &none
#define ___ &trans

/*
original HRMs, positional hold triggers do not work for some reason ie. positions do not limit the activation

/ {
  behaviors {
    rh_hrm: homerowmod_right {
        compatible = "zmk,behavior-hold-tap";
        bindings = <&kp>, <&kp>;
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        retro-tap;
        hold-trigger-key-positions = <KEYS_L KEYS_T>;
        hold-trigger-on-release;
    };

    lh_hrm: homerowmod_left {
        compatible = "zmk,behavior-hold-tap";
        bindings = <&kp>, <&kp>;
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        retro-tap;
        hold-trigger-key-positions = <KEYS_R KEYS_T>;
        hold-trigger-on-release;
    };
  };
};

positional keys work in the following behaviors, copy-pasted from docs

/ {
  behaviors {
    lh_hrm: left_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R KEYS_T>;    // <---[[right-hand keys]]
    };

    rh_hrm: right_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-unless-interrupted";
        tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
        quick-tap-ms = <200>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_L KEYS_T>;    // <---[[left-hand keys]]
    };
  };
};

Need to test different modifiers to see what breaks positional hold:
  flavor = "balanced"; //trigger the hold behavior when the tapping-term-ms has expired or another key is pressed and released.
  flavor = "hold-preferred"; // hold after tapping-term-ms or another keypress
  flavor = "tap-preferred"; // trigger hold after tapping-term-ms, keypresses do not affect the decision
  flavor = "tap-unless-interrupted"; //hold if keypress before tapping-term-ms, tap otherwise

  retro-tap; //tap if no other keypress before release 
  hold-trigger-on-release; //resolve hold-tap positional keys after first key release so it's possible to combine mods
  hold-while-undecided; //activate hold until keypress for mouse actions etc

  tapping-term-ms = <150>; //decision time until hold, modified by flavor
  quick-tap-ms = <175>; //tap if same key is pressed within this time. Useful for bspace etc, tap-hold will keep the key pressed.
  require-prior-idle-ms = <150>; //like quick-tap-ms except applies to all keys, no hold-tap if writing quickly   

1. try: works!
  tap-unless-interrupted seems suboptimal, try hold-preferred first
  remove quick-tap-ms, not needed on hrm  
  add retro-tap
  increase tapping term to 300
  add require-prior-idle-ms 175

2. try: breaks!
  hold-trigger-on-release; //resolve hold-tap positional keys after first key release so it's possible to combine mods

3. try:
  shift bottom row, add shifts to 25,34. Will lose two keys, maybe leave COMMA and SQT on base layer so FSLH and DOT will go. Maybe replace them with tapdances later
  switch RALT to LALT on L, add RALT to both sides for L3 mods
  new mods from medial to lateral CTRL,LALT,GUI,RALT and shifts on lat bottom row


/ {
  keymap{
    compatible = "zmk,keymap";
    Base {
      bindings = <
     // ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
XXX       &kp Q           &kp W           &kp E           &kp R           &kp T               &kp Y              &kp U           &kp I            &kp O          &kp P       XXX
     // ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
XXX       &lh_hrm LGUI A  &lh_hrm LALT S  &lh_hrm LCTRL D &lh_hrm LSHFT F &kp G               &kp H           &rh_hrm RSHFT J &rh_hrm RCTRL K &rh_hrm RALT L  &rh_hrm RGUI SQT XXX
     // ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
XXX       &kp Z           &kp X           &kp C           &kp V           &kp B               &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH       XXX
     // ╰───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
                                         &kp TAB          &kp SPACE       &kp RET             &kp ESCAPE      &kp BACKSPACE  &kp DEL
     //                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
      >;
    };
  };
};

*/

/ {
  behaviors {
    lh_hrm: left_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <300>;
        require-prior-idle-ms = <175>;
        bindings = <&kp>, <&kp>;
        retro-tap;
        hold-trigger-key-positions = <KEYS_R KEYS_T>;    
    };

    rh_hrm: right_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <300>;
        require-prior-idle-ms = <175>;
        bindings = <&kp>, <&kp>;
        retro-tap;
        hold-trigger-key-positions = <KEYS_L KEYS_T>;
    };
  };
};

/ {
  keymap{
    compatible = "zmk,keymap";
    Base {
      bindings = <
     // ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
XXX       &kp Q           &kp W           &kp E           &kp R           &kp T               &kp Y              &kp U           &kp I            &kp O          &kp P        XXX
     // ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
XXX       &lh_hrm RALT A  &lh_hrm LGUI S  &lh_hrm LALT D &lh_hrm LCTRL F  &kp G               &kp H          &rh_hrm RCTRL J  &rh_hrm LALT K  &rh_hrm RGUI L &rh_hrm RALT SQT XXX
     // ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
XXX       &kp LSHFT       &kp Z           &kp X           &kp C           &kp V               &kp B             &kp N           &kp M           &kp COMMA       &kp RSHFT     XXX
     // ╰───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
                                         &kp TAB          &kp SPACE       &kp RET             &kp ESCAPE      &kp BACKSPACE  &kp DEL
     //                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
      >;
    };
  };
};
/* Vim: set ft=c: */ 
