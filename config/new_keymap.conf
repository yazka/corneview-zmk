
#define HOST_OS 1 // 0 for win, 1 for linux, 2 for mac
#define KEYS_L {0, 1, 2, 3, 4, 5, 12, 13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 29}
#define KEYS_R {6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 30, 31, 32, 33, 34, 35}
#define KEYS_T {36, 37, 38, 39, 40, 41}

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175
#define PRIOR_IDLE_MS 150
#define TAPPING_TERM_MS 300

#define ZMK_HT compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>
#define ZMK_TD compatible = "zmk,behavior-tap-dance"; #binding-cells = <0>


#define HRM_FLAVOR "balanced"
#define HRM_QUICK_TAP_MS QUICK_TAP_MS
#define HRM_TAPPING_TERM_MS TAPPING_TERM_MS
#define HRM_PRIOR_IDLE_MS PRIOR_IDLE_MS

#define LT_FLAVOR "balanced"
#define LT_QUICK_TAP_MS QUICK_TAP_MS
#define LT_TAPPING_TERM_MS TAPPING_TERM_MS
#define LT_PRIOR_IDLE_MS PRIOR_IDLE_MS

#define BUILD_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    NAME: NAME { \
        ZMK_HT; \
        flavor = HRM_FLAVOR; \
        tapping-term-ms = <HRM_TAPPING_TERM_MS>; \
        quick-tap-ms = <HRM_QUICK_TAP_MS>; \
        require-prior-idle-ms = <HRM_PRIOR_IDLE_MS>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    };

#define BUILD_LT(NAME, HOLD, TAP, TRIGGER_POS) \
    NAME: NAME { \
        ZMK_HT; \
        flavor = LT_FLAVOR; \
        tapping-term-ms = <LT_TAPPING_TERM_MS>; \
        quick-tap-ms = <LT_QUICK_TAP_MS>; \
        require-prior-idle-ms = <LT_PRIOR_IDLE_MS>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
    };

#define TD_TAPPING_TERM_MS 100

#define BUILD_2KEY_TD(NAME, KEY1, KEY2) \
    NAME: NAME { \
        ZMK_TD; \
        tapping-term-ms = <TD_TAPPING_TERM_MS>; \
        bindings = <&kp KEY1>, <&kp KEY2>; \
    };
#define BUILD_3KEY_TD(NAME, KEY1, KEY2, KEY3) \
    NAME: NAME { \
        ZMK_TD; \
        tapping-term-ms = <TD_TAPPING_TERM_MS>; \
        bindings = <&kp KEY1>, <&kp KEY2>, <kp KEY3>; \
    };
#define BUILD_2TRG_TD(NAME, KEY1, KEY2) \
    NAME: NAME { \
        ZMK_TD; \
        tapping-term-ms = <TD_TAPPING_TERM_MS>; \
        bindings = <KEY1>, <KEY2>; \
    };
#define BUILD_3TRG_TD(NAME, KEY1, KEY2, KEY3) \
    NAME: NAME { \
        ZMK_TD; \
        tapping-term-ms = <TD_TAPPING_TERM_MS>; \
        bindings = <KEY1>, <KEY2>, <KEY3>; \
    };

#define COMBO_TIMEOUT_MS 30
#define COMBO_REQUIRE_PRIOR_IDLE_MS 100

#define BUILD_GLOBAL_COMBO(NAME, BINDING, KEYPOS) \
    NAME { \
        timeout_ms = <COMBO_TIMEOUT_MS>; \
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>; \
        key-positions = <KEYPOS>; \
        bindings = <BINDING>; \
    };
#define BUILD_LIMITED_COMBO(NAME, BINDING, KEYPOS, LAYERS) \
    NAME { \
        timeout_ms = <COMBO_TIMEOUT_MS>; \
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>; \
        key-positions = <KEYPOS>; \
        bindings = <BINDING>; \
        layers = <LAYERS>; \
    };

// Define combos

combos {
    compatible = "zmk, combos";
    to_gme {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <1 5>;
        bindings = <&to 7>;
        layers = <0>;
    }
    to_base {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <5 29>;
        bindings = <&to 0>;
        layers = <7>;
    }
    capsword {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <17 18>;
        bindings = <&caps_word>;
        layers = <0>;
    }
    left_reset {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <5 36 38>;
        bindings = <&sys_reset>;
    }
    right_reset {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <6 39 41>;
        bindings = <&sys_reset>;
    }
    left_bootloader {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <1 36 38>;
        bindings = <&bootloader>;
    }
    right_bootloader {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <10 39 41>;
        bindings = <&bootloader>;
    }
    bt_disconnect_0 {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <29 30 36>;
        bindings = <&bt BT_DISC 0>;
    }
    bt_disconnect_1 {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <29 31 36>;
        bindings = <&bt BT_DISC 1>;
    }
    bt_disconnect_2 {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <29 32 36>;
        bindings = <&bt BT_DISC 2>;
    }
    bt_disconnect_3 {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <29 33 36>;
        bindings = <&bt BT_DISC 3>;
    }
    bt_clear {
        timeout_ms = <COMBO_TIMEOUT_MS>;
        require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
        key-positions = <29 25 36>;
        bindings = <&bt BT_CLR>;
    }
};

behaviors {
    lh_mt {
        ZMK_HT;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 36 37 38 39 40 41>;
        hold-trigger-on-release;
    }
    lh_lt {
        ZMK_HT;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = <6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23>;
    }
    rh_mt {
        ZMK_HT;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        hold-trigger-on-release;
    }
    rh_lt {
        ZMK_HT;
        flavor = "balanced";
        tapping-term-ms = <300>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        bindings = <&mo>, <&kp>;
        hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
    }
    td_out_tog {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <XXX>, <XXX>, <&out OUT_TOG>;
    }
    td_ep_tog {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <XXX>, <XXX>, <&ext_power EP_TOG>;
    }
    td_at_dollar_caret {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <AT>, <DOLLAR>, <CARET>;
    }

    td_sqt_dqt_grave {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <SQT>, <DQT>, <GRAVE>;
    }
    td_excl_minus_prcnt {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <EXCL>, <MINUS>, <PRCNT>;
    }
    td_pipe_amps_under {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <PIPE>, <AMPS>, <UNDER>;
    }
    td_lpar_lbrc {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <LPAR>, <LBRC>;
    }
    td_rpar_rbrc {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <RPAR>, <RBRC>;
    }
    td_flsh_blsh {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <FSLH>, <BACKSLASH>;
    }
    td_qmark_star {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <QMARK>, <STAR>;
    }
    td_tilde_plus {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <TILDE>, <PLUS>;
    }
    td_lt_lbrk {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <LT>, <LEFT_BRACKET>;
    }
    td_gt_rbrk {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <GT>, <RIGHT_BRACKET>;
    }
    td_star_caret {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <STAR>, <CARET>;
    }
    td_7_grave {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <N7>, <GRAVE>;
    }
    td_8_lpar {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <N8>, <LPAR>;
    }
    td_9_rpar {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <N9>, <RPAR>;
    }
    td_5_prcnt {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <N5>, <PRCNT>;
    }
    td_0_comma {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <N0>, <COMMA>;
    }
    td_1_dot {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <N1>, <DOT>;
    }
    td_minus_under {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <MINUS>, <UNDER>;
    }
    td_semi_equal {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <SEMI>, <EQUAL>;
    }
    td_colon_hash {
        ZMK_TD;
        tapping-term-ms = <100>;
        bindings = <COLON>, <HASH>;
    }
};

